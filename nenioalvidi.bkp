using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Text;
using System.Net;
using System.Web;
using Newtonsoft.Json;
using System.Linq;
using System.Text.RegularExpressions;
using System.Runtime.Serialization.Json;

namespace CalcConsoleAug
{
    internal static class Program
    {
        private static void Main(string[] args)
        {
            // havi kulturon kiel Esperanto por milo-apartigiloj (ekz-e 10 000 anstataŭ 10000)
            // ankaŭ havi UTF8 por belaj ĉapeloj en konzolo
            CultureInfo.CurrentCulture = new CultureInfo("eo", false);
            Console.OutputEncoding = Encoding.UTF8;

            // Ĉi tiu stako konservas antaŭajn rezultojn
            Stack<double> rezultStako = new Stack<double>();
            Stack<string> alKonvertoUnuo = new Stack<string>();


            #region Listo de Anstataŭigo

            // Ĉi tiu listo estas uzata por ŝanĝi entajpitan tekston egalan al Dict.Key al tekso egala al Dict.Value 
            Dictionary<dynamic, dynamic> listoDeAnstataŭigo = new Dictionary<dynamic, dynamic>
            {
                //Akcio
                // { "quadrado", NenioAlVidi()},

                //konstantoj
                {"konstantopi", "3.1415926536"},
                {"konstpi", "3.1415926536"},
                {"konstantoe", "2.7182818285"},
                {"konste", "2.7182818285"},
                {"konstc", "299792458"},
                {"lumrapido", "299792458"},

                //tempo
                {"tagoj al horoj", "*24"},
                {"tagoj al minutoj", "*24*60"},
                {"horoj al minutoj", "*60"},
                {"horo al minuto", "*60"},
                {"h al min", "*60"},
                {"horoj al sekundoj", "*60*60"},
                {"horo al sekundo", "*60*60"},
                {"h al sek", "*60*60"},
                {"h al s", "*60*60"},
                {"minutoj al sekundoj", "*60"},
                {"minuto al sekundo", "*60"},
                {"min al sek", "*60"},
                {"min al s", "*60"},

                //kilometro

                {"km al pm", "*1000000000000000"},
                {"km en pm", "*1000000000000000"},
                {"km al nm", "*1000000000000"},
                {"km en nm", "*1000000000000"},
                {"km al µm", "*1000000000"},
                {"km en µm", "*1000000000"},
                {"km al mm", "*1000000"},
                {"km en mm", "*1000000"},
                {"km al cm", "*100000"},
                {"km en cm", "*100000"},
                {"km al dm", "*10000"},
                {"km en dm", "*10000"},
                {"km al marmejloj", "*0.539957"},
                {"km en marmejloj", "*0.539957"},
                {"km al marmejlo", "*0.539957"},
                {"km en marmejlo", "*0.539957"},
                {"km al mejloj", "*0.6213712"},
                {"km en mejloj", "*0.6213712"},
                {"km al mejlo", "*0.6213712"},
                {"km en mejlo", "*0,6213712"},
                {"km al m", "*1000"},
                {"km en m", "*1000"},
                {"km al dam", "*100"},
                {"km en dam", "*100"},
                {"km al hm", "*10"},
                {"km en hm", "*10"},
                {"marmejloj al km", "*1.852"},
                {"marmejloj en km", "*1.852"},
                {"marmejlo al km", "*1.852"},
                {"marmejlo en km", "*1.852"},
                {"mejloj al km", "*1.609344"},
                {"mejloj en km", "*1.609344"},
                {"mejlo al km", "*1.609344"},
                {"mejlo en km", "*1.609344"},

                //hektometro
                {"hm al km", "/10"},
                {"hm en km", "/10"},

                // Dekoblaj unuoj
                {"m al dm", "*10"},
                {"m en dm", "*10"},
                {"m al cm", "*100"},
                {"m en cm", "*100"},
                {"m al mm", "*1000"},
                {"m en mm", "*1000"},
                {"m al dam", "/10"},
                {"m en dam", "/10"},
                {"m al km", "/1000"},
                {"m en km", "/1000"},

                //usonaj unuoj
                {"colo en pm", "*25400000000"},
                {"colo en nm", "*25400000"},
                {"colo en μm", "*25400"},
                {"colo en mm", "*25.4"},
                {"colo en cm", "*2.54"},
                {"colo en dm", "*0.254"},
                {"colo en m", "*0.0254"},
                {"colo en dam", "*0.00254"},
                {"colo en hm", "*0.000254"},
                {"colo en km", "*0.0000254"},

                {"\\", ""},
                {",", "."},
                {";", "+"},
                {"[", "("},
                {"]", ")"},
                {"kpd", ""},
                {"oble", "*"},
                {"proc de", "/100*"},
                {"procde", "/100*"},
                {"proc", "/100*"},
                {"elc de", "/100*"},
                {"elc", "/100*"},
                {"dudek", "20"},
                {"tridek", "30"},
                {"kvardek", "40"},
                {"kvindek", "50"},
                {"sesdek", "60"},
                {"sepdek", "70"},
                {"okdek", "80"},
                {"naŭdek", "90"},
                {"nauxdek", "90"},
                {"naudek", "90"},
                {"dekunu", "11"},
                {"dekdu", "12"},
                {"dektri", "13"},
                {"dekkvar", "14"},
                {"dekkvin", "15"},
                {"dekses", "16"},
                {"deksep", "17"},
                {"dekok", "18"},
                {"deknaŭ", "19"},
                {"deknaux", "19"},
                {"deknau", "19"},

                {"ducentmil", "200000"},
                {"tricentmil", "300000"},
                {"kvarcentmil", "400000"},
                {"kvincentmil", "500000"},
                {"sescentmil", "600000"},
                {"sepcentmil", "700000"},
                {"okcentmil", "800000"},
                {"naŭcentmil", "900000"},
                {"nauxcentmil", "900000"},
                {"naucentmil", "900000"},
                {"centmil", "100000"},

                {"ducent", "200"},
                {"tricent", "300"},
                {"kvarcent", "400"},
                {"kvincent", "500"},
                {"sescent", "600"},
                {"sepcent", "700"},
                {"okcent", "800"},
                {"naŭcent", "900"},
                {"foje", "*"},
                {"foj", "*"},
                {"centfoje", "*100"},
                {"cent", "100"},
                {"plus", "+"},
                {"minus", "-"},
                {"sub", "-"},
                {"multobligitade", "*"},
                {"mult", "*"},
                {"dividitade", "/"},
                {"onigi", "/"},
                {"div", "/"},

                {"pli", "+"},
                {"kaj", "+"},
                {"unu", "1"},
                {"du", "2"},
                {"tri", "3"},
                {"kvar", "4"},
                {"kvin", "5"},
                {"ses", "6"},
                {"sep", "7"},
                {"ok", "8"},
                {"naŭ", "9"},
                {"nau", "9"},
                {"naux", "9"},
                {"dek", "10"},

                {"dumil", "2000"},
                {"trimil", "3000"},
                {"kvarmil", "4000"},
                {"kvinmil", "5000"},
                {"sesmil", "6000"},
                {"sepmil", "7000"},
                {"okmil", "8000"},
                {"ok mil", "8000"},
                {"naŭmil", "9000"},
                {"naŭ mil", "9000"},
                {"dekmil", "10000"},

                {"miliardo", "*1000000000"},
                {"mardo", "*1000000000"},
                {"miliono", "*1000000"},
                {" mil", "*1000"},
                {"mil", "000"},
                {"mi", "*1000000"},
                {"biliono", "*1000000000000"},
                {"bi", "*1000000000000"},

                {"mod", "%"},
            };

            #endregion Listo de Anstataŭigo

            
        }

        private static double Kvadrata(double numero)
        {
            return Math.Sqrt(numero);
        }

        private static string NenioAlVidi()
        {
            Console.WriteLine("Mi funkcias!");
            return "OLÉ!";
        }

        //static double AlTemperaturo()
        //{
        //}
    }
}